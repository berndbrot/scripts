#!/bin/bash
#
# $Id: checkdns.backup,v 1.7 2006/09/30 04:13:12 kadmos Exp $
#
# Point the DNS for a domain to the backup server if the primary
# server goes down.
#
# We determine whether the primary server is down by looking at
# the DNS A record for the domain (e.g. example.com, not
# www.example.com) and seeing if we can ping it.
#
# Which DNS records are updated is determined by the ddclient
# configuration file (e.g. $HOME/.ddclient.<domain>.conf).
#
# You must set the following variables in ~/.checkdns
# domain    name of A record to redirect
# primary   public host name of server that should serve domain by default
# backup    public host name of server that should serve domain if primary is down

###
# FUNCTIONS

# Import the common shell functions.
if test -f "$HOME/bin/functions"
then
    . "$HOME/bin/functions"
else
    echo "${0##/*/}: Cannot find function library, exiting"
    exit 1
fi


###
# CONFIGURATION

# DEFAULTS
# Device name of the internet interface.
interface=ppp0

# Whether to print debug messages to stderr.
debug=
quiet=
sms=true
syslog=true

while getopts "c:dq" flag
do
    case $flag in
    d)
        debug=true
        quiet=
        ;;
    q)
        quiet=true
        debug=
        ;;
    *)
        error "Invalid option -$flag"
        exit 2
    esac
done

# Read local configuration.
if test -f "$HOME/.checkdns"
then
    . "$HOME/.checkdns"
else
    error "Cannot find configuration file $HOME/.checkdns, exiting"
    exit 1
fi

# Configuration file for ddclient.
conf=$HOME/.ddclient.$domain.conf

# Cache file for ddclient.
cache=$HOME/.ddclient.$domain.cache

primary_down()
{
    ! host_up ${primary}
}

redirected()
{
    domainaddress=$(get_address_of ${domain})
    backupaddress=$(get_address_of ${backup})

    if test "$domainaddress" = "$backupaddress"
    then
        return 0
    else
        return 1
    fi
}

if internet_reachable
then
    if primary_down
    then
        info "Cannot reach ${primary}"
        if redirected
        then
            debug "Already redirected ${domain} to ${backup}"
        else
            notice "Cannot reach primary server for ${domain}, redirecting to ${backup}"
            run /usr/sbin/ddclient -file "$conf" -cache "$cache"
            if test $? -eq 0
            then
                info "Successfully updated ${domain}"
            else
                error "Error updating address for ${domain}"
                exit 1
            fi
        fi
    else
        info "Successfully contacted ${primary}, not redirecting ${domain}"
        # make sure that the first time we notice the primary host is down that
        # ddclient at least checks the ip address
        # if we enter this block multiple times after the primary host goes down,
        # the cache file will tell ddclient not to perform any subsequent update
        if test -f "$cache"
        then
            run rm "$cache"
        fi
    fi
fi
