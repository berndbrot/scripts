#!/bin/sh
# installs UNIX configuration files

create_dir()
{
	if test -e "$confdir"
	then
		return
	fi

	run mkdir "$confdir"
	if ! $simulate && test ! -d "$confdir"
	then
		error "$confdir is not a directory, exiting"
		exit 1
	fi
}

extract()
{
	if $simulate
	then
		info "Would extract $conftar into $confdir"
		return
	fi

	gzip -c -d "$conftar" | tar -x -C "$confdir" -f -
	if test $? -ne 0
	then
		error "Error extracting configuration archive"
		exit 1
	fi
}

backup()
{
	local path="$1"
	local backuppath="$path.$(date +%Y%m%d%H%M%S)"
	info "Moving $path to $backuppath"
	run mv "$path" "$backuppath"
}

link()
{
	info "Linking $link to $file"
	run ln -s "$1" "$2"
}

remove()
{
	run rm "$@"
}

run()
{
	if $simulate
	then
		info "Would run $*" 1>&2
	else
		"$@"
	fi
}

error()
{
	printf "%s\n" "$*" 1>&2
}

info()
{
	if ! $quiet
	then
		printf "%s\n" "$*" 1>&2
	fi
}

verbose()
{
	if $verbose
	then
		printf "%s\n" "$*" 1>&2
	fi
}

get_link()
{
	local sourcefile
	local destdir
	local prefix
	local destfile

	sourcefile="$1"
	destdir="$2"
	prefix="$3"

	sourcename="${sourcefile##*/}"
	if file_starts_with "$sourcename" "$prefix"
	then
		verbose "Not adding extra $prefix to $sourcename"
		prefix=
	fi

	echo "$destdir"/"$prefix""$sourcename"
}

file_starts_with()
{
	local filename="$1"
	local prefix="$2"

	if test -n "$prefix"
	then
		case $filename in
			$prefix*)
				true
				;;
			*)
				false
				;;
		esac
	else
		false
	fi
}

link_points_to()
{
	local link
	local file

	link="$1"
	file="$2"

	test "$(readlink -m "$link")" = "$(readlink -m "$file")"
}

# make_links <sourcedir> <destdir> <prefix> [<overwrite>]
# make symlinks recursively in <destdir> pointing to files in <sourcedir>
# <prefix> will be prepended to the basename of each symlink in destdir
# e.g. if <sourcedir> contains "bashrc" and prefix is ".", the link will be
# ".bashrc"
make_links()
{
	local sourcedir
	local destdir
	local prefix
	local file
	local link
	local overwrite

	sourcedir="$1"
	destdir="$2"
	prefix="$3"
	overwrite="${4:-true}"

	case "$(basename "$sourcedir")" in .git)
		verbose "Skipping $sourcedir"
		return
		;;
	esac

	verbose "Making links from $sourcedir to $destdir"

	for file in "$sourcedir"/* "$sourcedir"/.[!.]* "$sourcedir"/..?*
	do
		test -e "$file" || continue

		link=$(get_link "$file" "$destdir" "$prefix")

		if test -f "$link" && ! "$overwrite"
		then
			verbose "$link already exists and overwrite=$overwrite"
			continue
		fi

		if test -f "$file"
		then
			if test -L "$link"
			then
				if link_points_to "$link" "$file"
				then
					# link is already correct, go to next file
					verbose "$link already points to $file"
					continue
				else
					# link is wrong, remove it
					remove "$link"
				fi
			elif test -e "$link"
			then
				# something is in the way, back it up
				backup "$link"
			fi
			# install the new link
			link "$file" "$link"
		elif test -d "$file"
		then
			if test ! -d "$link"
			then
				if test -L "$link"
				then
					# a symlink is in the way, remove it
					remove "$link"
				elif test -e "$link"
				then
					# a file is in the way, back it up
					backup "$link"
				fi
				run mkdir -p "$link"
				if test $? -ne 0
				then
					printf "Error creating $link, skipping $file\n" 1>&2
					continue
				fi
			fi
			# recursively make links for each file under the "$file" directory
			# prefix is null because we assume each file below the first level
			# should not have a "." prefix, e.g. ~/conf/vim/plugin should be
			# ~/.vim/plugin rather than ~/.vim/.plugin
			make_links "$file" "$link" "" "$overwrite"
		fi
	done
}

basedir="$HOME"
confdir="$basedir"/conf
conftar="$HOME"/conf.tar.gz
destdir="$HOME"
simulate=false
extract=false	# now false by default, assume ~/conf is under git
prefix=.
quiet=false
verbose=false

while getopts ":d:enpqv" opt
do
	case $opt in
	d)
		confdir=$OPTARG
		;;
	e)
		extract=true
		;;
	n)
		simulate=true
		;;
	q)
		quiet=true
		verbose=false
		;;
	p)
		prefix=$OPTARG
		;;
	v)
		verbose=true
		quiet=false
		;;
	'?')
		error "Unknown option -$OPTARG"
		exit 2
		;;
	':')
		error "Missing argument to -$OPTARG"
		exit 2
		;;
	*)
		error "Bug: -$OPTARG option is missing"
		exit 1
		;;
	esac
done
shift $((OPTIND - 1))

create_dir "$confdir"

if $extract
then
	extract
fi

make_links "$confdir" "$destdir" "$prefix"
for dir in "$confdir".*
do
	make_links "$dir" "$destdir" "$prefix" false
done

# vim: set ts=4 sw=4 tw=0 noet:
